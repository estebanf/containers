/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.68
 * Generated at: 2016-05-04 11:30:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.widgets.reports;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class executeReport_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\tvar dataTableRef;\n");
      out.write("\tvar chartProperties = {\n");
      out.write("\t\"chart\": {\n");
      out.write("\t\t\"caption\": \"\",\n");
      out.write("\t\t\"subcaption\": \"\",\n");
      out.write("\t\t\"yaxisname\": \"\",\n");
      out.write("\t\t\"xaxisname\": \"\",\n");
      out.write("\t\t\"bgcolor\": \"#FFFFFF\",\n");
      out.write("\t\t\"showvalues\": \"1\",\n");
      out.write("\t\t\"plotborderthickness\": \"3\",\n");
      out.write("\t\t\"divlinecolor\": \"#CCCCCC\",\n");
      out.write("\t\t\"yaxisvaluespadding\": \"25\",\n");
      out.write("\t\t\"divlinealpha\": \"60\",\n");
      out.write("\t\t\"canvasbasecolor\": \"#CCCCCC\",\n");
      out.write("\t\t\"showcanvasbg\": \"0\",\n");
      out.write("\t\t\"animation\": \"1\",\n");
      out.write("\t\t\"palettecolors\": \"#008ee4,#6baa01,#f8bd19,#e44a00,#33bdda\",\n");
      out.write("\t\t\"showcanvasborder\": \"0\",\n");
      out.write("\t\t\"showLegend\":\"1\",\n");
      out.write("\t\t\"legendPosition\":\"BOTTOM\",\n");
      out.write("\t\t\"yAxisMinValue\":\"\",\n");
      out.write("\t\t\"yAxisMaxValue\":\"\",\n");
      out.write("\t\t\"showLabels\":\"1\",\n");
      out.write("\t\t\"showBorder\":\"0\"\n");
      out.write("\t},\n");
      out.write("\t\"data\": [\n");
      out.write("\t]\n");
      out.write("},tableProperties = {\n");
      out.write("\t\"bPaginate\": true,\n");
      out.write("\t\"bLengthChange\":false,\n");
      out.write("\t\"iDisplayLength\": 50,\n");
      out.write("\t\"bInfo\": false,\n");
      out.write("\t\"bFilter\": true,\n");
      out.write("\t\"bRetrieve\": true,\n");
      out.write("\t\"oLanguage\": {\n");
      out.write("\t\t\"sSearch\": \"\"\n");
      out.write("\t},\n");
      out.write("\t\"aoColumns\": []\n");
      out.write("},rowGroupingProperties = {\n");
      out.write("\tiGroupingColumnIndex:\"\",\n");
      out.write("\tsGroupBy: \"name\",\n");
      out.write("\tbExpandableGrouping: true,\n");
      out.write("\tbHideGroupingColumn: true\n");
      out.write("},availableChartTypes = [{\n");
      out.write("    swf: 'Column3D.swf',\n");
      out.write("    title: 'Column chart 3D',\n");
      out.write("    birt_name: 'BAR',\n");
      out.write("    value : 'bar-1',\n");
      out.write("    dimension: 1,\n");
      out.write("    inner_radius : false\n");
      out.write("}, {\n");
      out.write("    swf: 'Pie3D.swf',\n");
      out.write("    title: 'Pie chart 3D',\n");
      out.write("    birt_name: 'PIE',\n");
      out.write("    value : 'pie-1',\n");
      out.write("    dimension: 1,\n");
      out.write("    inner_radius : false\n");
      out.write("}, {\n");
      out.write("    swf: 'Doughnut3D.swf',\n");
      out.write("    title: 'Doughnut chart 3D',\n");
      out.write("    birt_name: 'PIE',\n");
      out.write("    value : 'doughnut-1',\n");
      out.write("    dimension: 1,\n");
      out.write("    inner_radius : true\n");
      out.write("}, {\n");
      out.write("    swf: 'Line.swf',\n");
      out.write("    title: 'Line Chart',\n");
      out.write("    birt_name: 'LINE',\n");
      out.write("    value : 'line-1',\n");
      out.write("    dimension: 1,\n");
      out.write("    inner_radius : false\n");
      out.write("}, {\n");
      out.write("    swf: 'Column2D.swf',\n");
      out.write("    title: 'Column chart 2D',\n");
      out.write("    birt_name: 'BAR',\n");
      out.write("    value : 'bar-0',\n");
      out.write("    dimension: 0,\n");
      out.write("    inner_radius : false\n");
      out.write("}, {\n");
      out.write("    swf: 'Pie2D.swf',\n");
      out.write("    title: 'Pie chart 2D',\n");
      out.write("    birt_name: 'PIE',\n");
      out.write("    value : 'pie-0',\n");
      out.write("    dimension: 0,\n");
      out.write("    inner_radius : false\n");
      out.write("}, {\n");
      out.write("    swf: 'Doughnut2D.swf',\n");
      out.write("    title: 'Doughnut chart 2D',\n");
      out.write("    birt_name: 'PIE',\n");
      out.write("    value : 'doughnut-0',\n");
      out.write("    dimension: 0,\n");
      out.write("    inner_radius : true\n");
      out.write("}];\n");
      out.write("\t$(function () {\n");
      out.write("\t\tvar widgetStateId = $('#executeReport').closest('.widget').attr(\"id\");\n");
      out.write("\t\tvar widgetObject = getWidgetObject(widgetStateId);\n");
      out.write("\t\tif (widgetObject.reportId !=undefined && widgetObject.reportId != null){\n");
      out.write("\t\t\tvar div_chart_id = \"adhocReportChart\"+widgetStateId;\n");
      out.write("\t\t\tvar div_table_id = \"adhocReportTable\"+widgetStateId;\n");
      out.write("\t\t\t$('#executeReport').attr('id', div_chart_id);\n");
      out.write("\t\t\t$('#adhocTableReport').attr('id', div_table_id);\n");
      out.write("\t\t\tvar refreshIcon = \"<a onclick=getReportData(this); class='refreshChart' data-action='reload'><i title='Refresh' class='fa fa-refresh'></i></a>\";\n");
      out.write("\t\t\t$(\"#\"+div_chart_id).parent().prev().find('.widgetRefresh').replaceWith(refreshIcon);\n");
      out.write("\t\t\tgetReportData(\"fetch\",widgetStateId,widgetObject);\n");
      out.write("\t\t}\n");
      out.write("\t});\n");
      out.write("\t\n");
      out.write("\tfunction getReportData(obj,widgetStateId,widgetObject){\n");
      out.write("\t\tclickRefresh(obj,true);\n");
      out.write("\t\tif ($(obj).length !=0 )\n");
      out.write("\t\t\twidgetStateId = $(obj).closest('.widget').attr(\"id\");\n");
      out.write("\t\telse if (widgetStateId != null && widgetStateId != undefined)\n");
      out.write("\t\t\twidgetStateId = widgetStateId;\n");
      out.write("\t\tif(widgetObject==undefined)\n");
      out.write("\t\t\twidgetObject = getWidgetObject(widgetStateId);\n");
      out.write("\t\tsendAjaxCall(intalio_bpms.adhoc_reporting.get_reports+\"/\"+widgetObject.reportId+\"?temp_id=\"+widgetStateId, \"GET\", false, true, \"json\", {}, handleReportAjaxError, function(chartData){\n");
      out.write("\t\t\t\tif(chartData.error_message!=undefined && chartData.error_message!=null){\n");
      out.write("\t\t\t\t\t$(\"#adhocReportChart\"+widgetStateId).replaceWith(chartData.error_message);\n");
      out.write("\t\t\t\t\treturn false;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\telse{\n");
      out.write("\t\t\t\t\tsendAjaxCall(intalio_bpms.adhoc_reporting.get_reports+\"/\"+widgetObject.reportId+\"/execute?temp_id=\"+widgetStateId, \"GET\", false, true, \"json\", {}, handleReportAjaxError,function(actData){\n");
      out.write("\t\t\t\t\t\tif(actData.error_message!=undefined && actData.error_message!=null){\n");
      out.write("\t\t\t\t\t\t\t$(\"#adhocReportChart\"+widgetStateId).replaceWith(actData.error_message);\n");
      out.write("\t\t\t\t\t\t\treturn false;\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\telse{\n");
      out.write("\t\t\t\t\t\t\tif(chartData.report.items[0].type==\"TABLE\")\n");
      out.write("\t\t\t\t\t\t\t\tpopulateTableData(chartData,actData,widgetStateId);\n");
      out.write("\t\t\t\t\t\t\telse\n");
      out.write("\t\t\t\t\t\t\t\tpopulateChartData(chartData,actData,widgetStateId);\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\tclickRefresh(obj,false);\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction populateChartData(chartData,actData,widgetStateId){\n");
      out.write("\t\tif(chartData.report.items.length>=1){\n");
      out.write("\t\t\tchartProperties.chart.caption    = chartData.report.items[0].title || \"\";\n");
      out.write("\t\t\tchartProperties.chart.xaxisname  = chartData.report.items[0].category.title || \"\";\n");
      out.write("\t\t\tchartProperties.chart.yaxisname  = chartData.report.items[0].value.title || \"\";\n");
      out.write("\t\t\tif(chartData.report.items[0].metadata.legend.visible==false)\n");
      out.write("\t\t\t\tchartProperties.chart.showLegend = \"0\";\n");
      out.write("\t\t\tchartProperties.chart.legendPosition = chartData.report.items[0].metadata.legend.position || \"BOTTOM\";\n");
      out.write("\t\t\tFusionCharts.setCurrentRenderer('javascript');\n");
      out.write("\t\t\tif(FusionCharts(\"adhocReport\"+widgetStateId)!=undefined && FusionCharts(\"adhocReport\"+widgetStateId)!=null)\n");
      out.write("\t\t\t\tFusionCharts(\"adhocReport\"+widgetStateId).dispose();\n");
      out.write("\t\t\tvar chartSwf = getReportType(chartData);\n");
      out.write("\t\t\tchartReference = new FusionCharts(\"widgets/swf/\"+chartSwf,\"adhocReport\");\n");
      out.write("\t\t\tif (chartData.report.items[0].type == 'PIE'){\n");
      out.write("\t\t\t\tchartProperties.chart.showLabels = 0\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tchartReference.configure(\"ChartNoDataText\",chartData.report.items[0].metadata.no_data_message||\"\");\n");
      out.write("\t\t\tvar rows    = actData.report_results[0].rows || [];\n");
      out.write("\t\t\tvar tempObj= {label:\"\",value:\"\",toolText:\"\",displayValue:\"\"};\n");
      out.write("\t\t\tfor(var k=0;k<rows.length;k++){\n");
      out.write("\t\t\t\ttempObj = {};\n");
      out.write("\t\t\t\tif(chartData.report.items[0].metadata.legend.show_value){\n");
      out.write("\t\t\t\t\ttempObj.label = rows[k].data[0]+\",\"+rows[k].data[1];\n");
      out.write("\t\t\t\t\ttempObj.displayValue = rows[k].data[0]+\",\"+rows[k].data[1];\n");
      out.write("\t\t\t\t}else\n");
      out.write("\t\t\t\t\ttempObj.label = rows[k].data[0];\n");
      out.write("\t\t\t\ttempObj.value = rows[k].data[1];\n");
      out.write("\t\t\t\tchartProperties.data.push(tempObj);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tchartReference.setJSONData(chartProperties);\n");
      out.write("\t\t\tchartReference.render(\"adhocReportChart\"+actData.temp_id);\n");
      out.write("\t\t\tchartProperties.data = [];\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t function populateTableData(chartData,actData,widgetStateId){\n");
      out.write("\t\tif(chartData.report.items.length>=1 && actData.report_results.length>=1){\n");
      out.write("\t\t\tvar groupingIndex,groupingVisible;\n");
      out.write("\t\t\t$(\"#adhocReportChart\"+actData.temp_id).append($(\"#adhocReportTable\"+actData.temp_id));\n");
      out.write("\t\t\t$(\"#adhocReportChart\"+actData.temp_id).css({\"overflow-y\":\"auto\",\"margin-left\":\"0px\"});\n");
      out.write("\t\t\theadersArr = [];\n");
      out.write("\t\t\t$(\"#adhocReportTable\"+actData.temp_id).find(\"thead tr\").empty();\n");
      out.write("\t\t\tfor(var k=0;k<chartData.report.items[0].series.length;k++){\n");
      out.write("\t\t\t\tif(chartData.report.items[0].series[k].visible || chartData.report.items[0].groups.length>0 && chartData.report.items[0].series[k].column.name===chartData.report.items[0].groups[0].column_bindings[0]){\n");
      out.write("\t\t\t\t\t$(\"#adhocReportTable\"+actData.temp_id).find(\"thead tr\").append(\"<th>\"+chartData.report.items[0].series[k].title+\"</th>\");\n");
      out.write("\t\t\t\t\ttableProperties.aoColumns.push({\"bSortable\": false });\n");
      out.write("\t\t\t\t\theadersArr[headersArr.length] = chartData.report.items[0].series[k].column.name;\n");
      out.write("\t\t\t\t\tif(chartData.report.items[0].groups.length>0 && chartData.report.items[0].series[k].column.name===chartData.report.items[0].groups[0].column_bindings[0]){\n");
      out.write("\t\t\t\t\t\tgroupingIndex   = k;\n");
      out.write("\t\t\t\t\t\tgroupingVisible = chartData.report.items[0].series[k].visible;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\ttableProperties.iDisplayLength = chartData.report.items[0].metadata.page_break || 50;\n");
      out.write("\t\t\tif(chartData.report.items[0].groups.length>0 && chartData.report.items[0].groups[0].column_bindings.length>0){\n");
      out.write("\t\t\t\trowGroupingProperties.iGroupingColumnIndex = groupingIndex;\n");
      out.write("\t\t\t\tgroupingVisible = false;\n");
      out.write("\t\t\t\tgroupingVisible == false ? rowGroupingProperties.bHideGroupingColumn = true : rowGroupingProperties.bHideGroupingColumn = false;\n");
      out.write("\t\t\t\tif (dataTableRef) {\n");
      out.write("\t\t\t\t\tdataTableRef.fnClearTable();\n");
      out.write("\t\t\t\t\tdataTableRef.fnDestroy();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tdataTableRef = $(\"#adhocReportTable\"+actData.temp_id).dataTable(tableProperties).rowGrouping(rowGroupingProperties);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse{\n");
      out.write("\t\t\t\tif (dataTableRef) {\n");
      out.write("\t\t\t\t\tdataTableRef.fnClearTable();\n");
      out.write("\t\t\t\t\tdataTableRef.fnDestroy();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tdataTableRef = $(\"#adhocReportTable\"+actData.temp_id).dataTable(tableProperties);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tcustomTable(\"adhocReportTable\"+actData.temp_id);\n");
      out.write("\t\t\t$(\".dataTables_filter\").closest(\".row\").remove();\n");
      out.write("\t\t\tdataTableRef.fnClearTable();\n");
      out.write("\t\t\tif(actData.report_results[0].rows.length>0){\n");
      out.write("\t\t\t\t$.each(actData.report_results[0].rows, function(key, value) {\n");
      out.write("\t\t\t\t\tvar items = [];\n");
      out.write("\t\t\t\t\tfor(var colDataPosition=0;colDataPosition<value.data.length;colDataPosition++){\n");
      out.write("\t\t\t\t\t\tvar colValue = value.data[colDataPosition]==null ? \"null\" : value.data[colDataPosition];\n");
      out.write("\t\t\t\t\t\tif (actData.report_results[0].columns[colDataPosition] && actData.report_results[0].columns[colDataPosition].data_type == 'date-time')\n");
      out.write("\t\t\t\t\t\t\tcolValue = convertDateTimeFormat(colValue)\n");
      out.write("\t\t\t\t\t\tif(groupingIndex===colDataPosition && chartData.report.items[0].groups.length>0 && chartData.report.items[0].groups[0].column_bindings.length>0)\n");
      out.write("\t\t\t\t\t\t\titems[items.length] = chartData.report.items[0].groups[0].column_bindings[0]+\": \"+colValue;\n");
      out.write("\t\t\t\t\t\telse\n");
      out.write("\t\t\t\t\t\t\titems[items.length] = colValue;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tdataTableRef.fnAddData(items, false);\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t\tdataTableRef.fnDraw(true);\n");
      out.write("\t\t\t\ttableProperties.aoColumns=[];\n");
      out.write("\t\t\t\tif(chartData.report.items[0].groups.length>0 && groupingVisible==false)\n");
      out.write("\t\t\t\t\theadersArr.splice($.inArray(chartData.report.items[0].groups[0].column_bindings[0],headersArr),1);\n");
      out.write("\t\t\t\tif(chartData.report.items[0].metadata.highlights.length>0)\n");
      out.write("\t\t\t\t\thighLightingRows(chartData,\"adhocReportTable\"+actData.temp_id);\n");
      out.write("\t\t\t\tif(chartData.report.items[0].series.length>0)\n");
      out.write("\t\t\t\t\thighLightingCells(chartData,\"adhocReportTable\"+actData.temp_id);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\tremoveLoading();\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction highLightingRows(chartData,div_table_id){\n");
      out.write("\t\tfor (var j=0;j<chartData.report.items[0].metadata.highlights.length;j++){\n");
      out.write("\t\t\tvar operator = chartData.report.items[0].metadata.highlights[j].filter.operator;\n");
      out.write("\t\t\tvar colPosition = $.inArray(chartData.report.items[0].metadata.highlights[j].filter.expression.replace(/.*\\[\"|\\\"]/gi,''),headersArr);\n");
      out.write("\t\t\tif(colPosition>=0){\n");
      out.write("\t\t\t\t$(\"#\"+div_table_id+\" tr\").each(function() {\n");
      out.write("\t\t\t\t\tvar tdObj = $(this).find(\"td:eq(\"+colPosition+\")\");\n");
      out.write("\t\t\t\t\thandleOperators(operator,tdObj.text(),chartData.report.items[0].metadata.highlights[j].filter.values,chartData.report.items[0].metadata.highlights[j].font,$(this),\"highlighting\");\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction highLightingCells(chartData,div_table_id){\n");
      out.write("\t\tfor(var k=0;k<chartData.report.items[0].series.length;k++){\n");
      out.write("\t\t\tif(chartData.report.items[0].series[k].metadata!=null){\n");
      out.write("\t\t\t\tfor(var l=0;l<chartData.report.items[0].series[k].metadata.highlights.length;l++){\n");
      out.write("\t\t\t\t\tvar operator = chartData.report.items[0].series[k].metadata.highlights[l].filter.operator;\n");
      out.write("\t\t\t\t\tvar colPosition = $.inArray(chartData.report.items[0].series[k].metadata.highlights[l].filter.expression.replace(/.*\\[\"|\\\"]/gi,''),headersArr);\n");
      out.write("\t\t\t\t\tif(colPosition>=0){\n");
      out.write("\t\t\t\t\t\t$(\"#\"+div_table_id+\" tr\").each(function() {\n");
      out.write("\t\t\t\t\t\t\tvar tdObj = $(this).find(\"td:eq(\"+colPosition+\")\");\n");
      out.write("\t\t\t\t\t\t\tif(!tdObj.hasClass(\"group\"))\n");
      out.write("\t\t\t\t\t\t\t\thandleOperators(operator,tdObj.text(),chartData.report.items[0].series[k].metadata.highlights[l].filter.values,chartData.report.items[0].series[k].metadata.highlights[l].font,tdObj,\"highlighting\");\n");
      out.write("\t\t\t\t\t\t});\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tfor(var m=0;m<chartData.report.items[0].series[k].metadata.modifiers.length;m++){\n");
      out.write("\t\t\t\t\tvar operator = chartData.report.items[0].series[k].metadata.modifiers[m].filter.operator;\n");
      out.write("\t\t\t\t\tvar colPosition = $.inArray(chartData.report.items[0].series[k].metadata.modifiers[m].filter.expression.replace(/.*\\[\"|\\\"]/gi,''),headersArr);\n");
      out.write("\t\t\t\t\tif(colPosition>=0 && chartData.report.items[0].series[k].metadata.modifiers[m].value!=null){\n");
      out.write("\t\t\t\t\t\t$(\"#\"+div_table_id+\" tr\").each(function() {\n");
      out.write("\t\t\t\t\t\t\tvar tdObj = $(this).find(\"td:eq(\"+colPosition+\")\");\n");
      out.write("\t\t\t\t\t\t\thandleOperators(operator,tdObj.text(),chartData.report.items[0].series[k].metadata.modifiers[m].filter.values,chartData.report.items[0].series[k].metadata.modifiers[m].value,tdObj,\"modifiers\");\n");
      out.write("\t\t\t\t\t\t});\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction handleOperators(operator,actValue,valuesArr,value,htmlObj,type){\n");
      out.write("\t\tif(operator==\"eq\" && actValue===valuesArr[0])\n");
      out.write("\t\t\ttype==\"highlighting\" ? applyCss(value,htmlObj) : htmlObj.text(value);\n");
      out.write("\t\t\t\n");
      out.write("\t\telse if(operator==\"between\" && parseInt(actValue)>=parseInt(valuesArr[0]) && parseInt(actValue)<=parseInt(valuesArr[1]))\n");
      out.write("\t\t\ttype==\"highlighting\" ? applyCss(value,htmlObj) : htmlObj.text(value);\n");
      out.write("\t\t\t\n");
      out.write("\t\telse if(operator==\"in\" && $.inArray(actValue,valuesArr)>=0)\n");
      out.write("\t\t\ttype==\"highlighting\" ? applyCss(value,htmlObj) : htmlObj.text(value);\n");
      out.write("\t\t\t\n");
      out.write("\t\telse if(operator==\"gt\" && parseInt(actValue) > parseInt(valuesArr[0]))\n");
      out.write("\t\t\ttype==\"highlighting\" ? applyCss(value,htmlObj) : htmlObj.text(value);\n");
      out.write("\t\t\n");
      out.write("\t\telse if(operator==\"lt\" && parseInt(actValue) < parseInt(valuesArr[0]))\n");
      out.write("\t\t\ttype==\"highlighting\" ? applyCss(value,htmlObj) : htmlObj.text(value);\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction applyCss(value,htmlObj){\n");
      out.write("\t\thtmlObj.attr(\"style\",\"background-color:\"+value.background_color+\" !important;color:\"+value.color);\n");
      out.write("\t\tvalue.italics == true ?htmlObj.css({\"font-style\":\"italic\"}) : \"\";\n");
      out.write("\t\tvalue.bold == true ? htmlObj.css({\"font-weight\":\"bold\"}) : \"\"\n");
      out.write("\t\tvalue.line_through == true ? htmlObj.css({\"text-decoration\":\"line-through\"}) : \"\";\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction handleReportAjaxError(data){\n");
      out.write("\t\tif(data.error!=undefined)\n");
      out.write("\t\t\tshowErrorNotification(data.error);\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\tfunction getReportType (chartData){\n");
      out.write("\t\tvar type = chartData.report.items[0].type;\n");
      out.write("\t\tvar dimensions = chartData.report.items[0].dimensions;\n");
      out.write("\t\tvar inner_radius = chartData.report.items[0].metadata.inner_radius != 0 ? true : false;\n");
      out.write("\t\tvar swf = 'Column3D.swf'\n");
      out.write("\t\tfor (var i = 0 ; i < availableChartTypes.length ; i++){\n");
      out.write("\t\t\tvar object = availableChartTypes[i]\n");
      out.write("\t\t\tif (type == object.birt_name && dimensions == object.dimension && inner_radius == object.inner_radius){\n");
      out.write("\t\t\t\tswf = object.swf\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\treturn swf\n");
      out.write("\t}\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("<div id=\"executeReport\" class=\"chart\"></div>\n");
      out.write("<div id=\"adhocTableReportDiv\" class=\"hide\">\n");
      out.write("\t<div class=\"table-responsive\">\n");
      out.write("\t\t<table id=\"adhocTableReport\" class=\"table table-striped table-bordered table-hover\">\n");
      out.write("\t\t\t<thead><tr></tr></thead>\n");
      out.write("\t\t\t<tbody></tbody>\n");
      out.write("\t\t</table>\n");
      out.write("\t</div>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
