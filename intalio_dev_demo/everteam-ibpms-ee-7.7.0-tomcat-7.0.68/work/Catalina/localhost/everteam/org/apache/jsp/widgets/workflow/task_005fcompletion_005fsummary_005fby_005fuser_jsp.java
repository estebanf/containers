/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.68
 * Generated at: 2016-05-04 10:51:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.widgets.workflow;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class task_005fcompletion_005fsummary_005fby_005fuser_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<body>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\t\n");
      out.write("\t/** @Function Name    : Jquery Ready Function \n");
      out.write("\t*   @Description      : jquery ready function\n");
      out.write("\t*   @param            :\n");
      out.write("\t*   @returns         :\n");
      out.write("\t**/\n");
      out.write("\t$(function () {\n");
      out.write("\t\t$('.limitValue').chosen();\n");
      out.write("\t\t$('.limitValue').next().css('width',170);\n");
      out.write("\t\tvar widgetStateId = $('#task_completion_summary_by_user').closest('.widget').attr(\"id\");\n");
      out.write("\t    var widgetObject = getWidgetObject(widgetStateId);\n");
      out.write("\t    if (widgetObject.filter == undefined || widgetObject.filter == null || widgetObject.filter ==''){\n");
      out.write("\t    \tvar filterObject = {};\n");
      out.write("\t    \tfilterObject.chartType = defaults.swf3;\n");
      out.write("\t    \twidgetObject.filter = filterObject;\n");
      out.write("\t    \tpersistWidget(widgetObject);\n");
      out.write("\t    }\n");
      out.write("\t    var divId_TCSBU = defaults.chart9 + widgetStateId;\n");
      out.write("\t\t$('#task_completion_summary_by_user').attr('id', divId_TCSBU);\n");
      out.write("\t\t$('#TCSBUChartFilter').attr('id', \"TCSBUChartFilter\"+widgetStateId);\n");
      out.write("\t\t/**all possible charts*/\n");
      out.write("\t\tvar possibleCharts = [defaults.swf3, defaults.swf4, defaults.swf5, defaults.swf7, defaults.swf8, defaults.swf9,defaults.swf13];\n");
      out.write("\t\tvar possibleChartsNames = [\"Column chart 3D\", \"Pie chart 3D\", \"Doughnut chart 3D\", \"Column chart 2D\", \"Pie chart 2D\", \"Doughnut chart 2D\",\"Bar chart\"];\n");
      out.write("\t\t$('#TCSBUChartFilter'+widgetStateId+' .chartTypes').empty();\n");
      out.write("\t    $.each(possibleCharts, function (idx, value) {\n");
      out.write("\t        $('#TCSBUChartFilter'+widgetStateId+' .chartTypes').append('<option value=\"'+value+'\">'+possibleChartsNames[idx]+'</option>');\n");
      out.write("\t    });\n");
      out.write("\t    $('#TCSBUChartFilter'+widgetStateId+' .chartTypes').chosen();\n");
      out.write("\t    $('#TCSBUChartFilter'+widgetStateId+' .chartTypes').next().css('width',170);\n");
      out.write("\t\tvar filterIcon = \"&nbsp;<a href='#' class='filterIcon' onclick='filterProcessTCSBUChart(this);'><i title='Filter Chart' class='fa fa-cog'></i></a>\";\n");
      out.write("\t\tvar refreshIcon = \"<a onclick=getTCSBUChartData(this); class='refreshChart' data-action='reload'><i title='Refresh' class='fa fa-refresh'></i></a>\";\n");
      out.write("\t\tif ($(\"#\" + divId_TCSBU).closest('.widget-box').find('.widget-toolbar').find('.filterIcon').length == 0) {\n");
      out.write("\t\t\t$(\"#\" + divId_TCSBU).closest('.widget-box').find('.widget-toolbar').children(':nth-child(2)').replaceWith(refreshIcon);\n");
      out.write("\t\t\t$(\"#\" + divId_TCSBU).closest('.widget-box').find('.widget-toolbar').prepend(filterIcon);\n");
      out.write("\t\t}\n");
      out.write("\t\tgetTCSBUChartData($(\"#\" + divId_TCSBU),widgetStateId);\n");
      out.write("\t\t$('.chartFilterDates').datepicker({autoclose:true}).next().on(ace.click_event, function(){ $(this).prev().focus(); });\n");
      out.write("\t\t$('#TCSBUChartFilter'+widgetStateId+' .fromDate').on('change',function() {\n");
      out.write("\t\t\tvar fromDate = $('#TCSBUChartFilter'+widgetStateId+' .fromDate').val();\n");
      out.write("\t\t\tvar toDate = $('#TCSBUChartFilter'+widgetStateId+' .toDate').val();\n");
      out.write("\t\t\tif(fromDate > toDate)\n");
      out.write("\t\t\t\t$('#TCSBUChartFilter'+widgetStateId+' .toDate').val(\"\");\n");
      out.write("\t\t\t$('#TCSBUChartFilter'+widgetStateId+' .toDate').datepicker('setStartDate',fromDate);\n");
      out.write("\t\t});\n");
      out.write("\t});\n");
      out.write("\n");
      out.write("\t/** @Function Name   : getTCSBUChartData\n");
      out.write("\t*   @Description     : fetches the data from server\n");
      out.write("\t*   @param           : query fetch / refresh\n");
      out.write("\t*   @returns         :\n");
      out.write("\t**/\n");
      out.write("\n");
      out.write("\tfunction getTCSBUChartData(obj,widId) {\n");
      out.write("\t\tclickRefresh(obj,true);\n");
      out.write("\t    var widgetStateId ;\n");
      out.write("\t\tvar data = {};\n");
      out.write("\t\tif ($(obj).length !=0){\n");
      out.write("\t\t\twidgetStateId = $(obj).closest('.widget').attr(\"id\");\n");
      out.write("\t\t} else if (widId != null && widId != undefined){\n");
      out.write("\t\t\twidgetStateId = widId;\n");
      out.write("\t\t}\n");
      out.write("\t\tvar widgetObject = getWidgetObject(widgetStateId);\n");
      out.write("\t    if (widgetObject != null && widgetObject.filter != undefined && widgetObject.filter != null && widgetObject.filter != ''){\n");
      out.write("\t    \tvar filterObject = widgetObject.filter;\n");
      out.write("\t    \tif (filterObject.fromDate != undefined && filterObject.fromDate != null)\n");
      out.write("\t    \t\tdata.since = filterObject.fromDate\n");
      out.write("\t    \tif (filterObject.toDate != undefined && filterObject.toDate != null)\n");
      out.write("\t    \t\tdata.until = filterObject.toDate\n");
      out.write("\t    \tif (filterObject.limit != undefined && filterObject.limit != null)\n");
      out.write("\t    \t\tdata.limit = filterObject.limit\n");
      out.write("\t    }\n");
      out.write("\t    sendAjaxCall('dashboard/widgets/maxTaskCompletionSummary', \"POST\", false, true, \"json\", data, TCSBUErrorCall, function(responseData){\n");
      out.write("\t    \tclickRefresh(obj,false);\n");
      out.write("\t    \tif(responseData.error_message == undefined)\n");
      out.write("\t    \t\tpopulateTaskCompletionSummary(responseData,widgetStateId);\n");
      out.write("\t    \telse\n");
      out.write("\t    \t\tshowErrorNotification(responseData.error_message);\n");
      out.write("\t    });\n");
      out.write("\t}\n");
      out.write("\tfunction filterProcessTCSBUChart(obj){\n");
      out.write("\t\tvar widgetStateId = $(obj).closest('.widget').attr(\"id\");\n");
      out.write("\t\tvar widgetObject = getWidgetObject(widgetStateId);\n");
      out.write("\t\tvar modalObj = $('#TCSBUChartFilter'+widgetStateId);\n");
      out.write("\t\tif (widgetObject != null && widgetObject.filter != undefined && widgetObject.filter != null && widgetObject.filter != ''){\n");
      out.write("\t    \tvar filterObject = widgetObject.filter;\n");
      out.write("\t    \tif (filterObject.fromDate != undefined && filterObject.fromDate != null){\n");
      out.write("\t    \t\t$(modalObj).find('.fromDate').val(filterObject.fromDate);\n");
      out.write("\t    \t\t$('#TCSBUChartFilter'+widgetStateId+' .toDate').datepicker('setStartDate',filterObject.fromDate);\n");
      out.write("\t\t\t}\n");
      out.write("\t    \telse \n");
      out.write("\t    \t\t$(modalObj).find('.fromDate').val('');\n");
      out.write("\t    \tif (filterObject.toDate != undefined && filterObject.toDate != null)\n");
      out.write("\t    \t\t$(modalObj).find('.toDate').val(filterObject.toDate);\n");
      out.write("\t    \telse \n");
      out.write("\t    \t\t$(modalObj).find('.toDate').val('');\n");
      out.write("\t    \tif (filterObject.limit != undefined && filterObject.limit != null){\n");
      out.write("\t    \t\t$(modalObj).find('.limitValue').removeAttr('style').removeClass('chzn-done');\n");
      out.write("\t    \t\t$(modalObj).find('.limitValue').next().remove();\n");
      out.write("\t    \t\t$(modalObj).find('.limitValue').val(filterObject.limit);\n");
      out.write("\t    \t\t$(modalObj).find('.limitValue').chosen();\n");
      out.write("\t    \t\t$(modalObj).find('.limitValue').next().css('width',170);\n");
      out.write("\t    \t}\n");
      out.write("\t    \telse \n");
      out.write("\t    \t\t$(modalObj).find('.limitValue').val('');\n");
      out.write("\t    \tif (filterObject.chartType != undefined && filterObject.chartType != null){\n");
      out.write("\t    \t\t$(modalObj).find('.chartTypes').next().remove();\n");
      out.write("\t    \t\t$(modalObj).find('.chartTypes').removeAttr('style').removeClass('chzn-done');\n");
      out.write("\t    \t\t$(modalObj).find('.chartTypes').val(filterObject.chartType);\n");
      out.write("\t    \t\t$(modalObj).find('.chartTypes').chosen();\n");
      out.write("\t    \t\t$(modalObj).find('.chartTypes').next().css('width',170);\n");
      out.write("\t    \t}\n");
      out.write("\t    }\n");
      out.write("\t    if (widgetObject != null){\n");
      out.write("\t    \tif (widgetObject.title != undefined && widgetObject.title != null)\n");
      out.write("\t    \t\t$(modalObj).find('.chartName').val(widgetObject.title);\n");
      out.write("\t    }\n");
      out.write("\t    $(modalObj).find('.modal-footer .applyButton').attr('widgetId',widgetStateId);\n");
      out.write("\t    $(modalObj).find('.error-Msg').addClass('hide');\n");
      out.write("\t    modalShow('TCSBUChartFilter'+widgetStateId);\n");
      out.write("\t}\n");
      out.write("\tfunction applyTCSBUFilter(obj){\n");
      out.write("\t\tvar widgetStateId = $(obj).attr(\"widgetId\");\n");
      out.write("\t\tvar widgetObject = getWidgetObject(widgetStateId);\n");
      out.write("\t\tvar filterObject = {};\n");
      out.write("\t\tvar modalObj = $(obj).closest('.modal');\n");
      out.write("\t    var reqData = {};\n");
      out.write("\t    var oldObject = JSON.parse(JSON.stringify(widgetObject.filter));\n");
      out.write("\t\tdelete oldObject.chartType;\n");
      out.write("\t    if ($(modalObj).find('.fromDate').val() != undefined && $(modalObj).find('.fromDate').val() != ''){\n");
      out.write("\t        reqData.since = $(modalObj).find('.fromDate').val();\n");
      out.write("\t        filterObject.fromDate = $(modalObj).find('.fromDate').val();\n");
      out.write("\t    } else \n");
      out.write("\t    \tdelete reqData.since;\n");
      out.write("\t    if ($(modalObj).find('.toDate').val() != undefined  && $(modalObj).find('.toDate').val() != ''){\n");
      out.write("\t        reqData.until = $(modalObj).find('.toDate').val();\n");
      out.write("\t        filterObject.toDate = $(modalObj).find('.toDate').val();\n");
      out.write("\t    } else \n");
      out.write("\t    \tdelete reqData.until;\n");
      out.write("\t    if ($(modalObj).find('.chartTypes').val() != undefined && $(modalObj).find('.chartTypes').val() != null ){\n");
      out.write("\t    \tfilterObject.chartType = $(modalObj).find('.chartTypes').val();\n");
      out.write("\t    }\n");
      out.write("\t    if ($(modalObj).find('.limitValue').val() != undefined  && $(modalObj).find('.limitValue').val() != '-1'){\n");
      out.write("\t    \tfilterObject.limit = $(modalObj).find('.limitValue').val();\n");
      out.write("\t    \treqData.limit = $(modalObj).find('.limitValue').val();\n");
      out.write("\t    } else \n");
      out.write("\t    \tdelete reqData.limit;\n");
      out.write("\t    if ($(modalObj).find('.chartName').val() != undefined && $(modalObj).find('.chartName').val() != null && $.trim($(modalObj).find('.chartName').val()) != ''){\n");
      out.write("\t    \twidgetObject.title = $(modalObj).find('.chartName').val();\n");
      out.write("\t    \t$('#'+widgetStateId).find('.widget-name').text($(modalObj).find('.chartName').val());\n");
      out.write("\t\t    widgetObject.filter = filterObject;\n");
      out.write("\t\t    persistWidget(widgetObject);\n");
      out.write("\t\t    $('#TCSBUChartFilter'+widgetStateId).modal('hide');\n");
      out.write("\t\t    var newObject = JSON.parse(JSON.stringify(filterObject));\n");
      out.write("\t\t\tdelete newObject.chartType;\n");
      out.write("\t\t\tif(compareObjects(newObject,oldObject))\n");
      out.write("\t\t\t\tchangeChartType_TCSBU(widgetStateId);\n");
      out.write("\t\t\telse{\n");
      out.write("\t\t\t\tclickRefresh($('#'+widgetStateId).find('.widget-header'),true);\n");
      out.write("\t\t\t\tsendAjaxCall('dashboard/widgets/maxTaskCompletionSummary', \"POST\", false, true, \"json\", reqData, TCSBUErrorCall, function(responseData){\n");
      out.write("\t\t\t\t\tclickRefresh($('#'+widgetStateId).find('.widget-header'),false);\n");
      out.write("\t\t\t\t\tif(responseData.error_message == undefined)\n");
      out.write("\t\t\t\t\t\tpopulateTaskCompletionSummary(responseData,widgetStateId);\n");
      out.write("\t\t\t\t\telse\n");
      out.write("\t\t\t\t\t\tshowErrorNotification(responseData.error_message);\n");
      out.write("\t\t\t\t\t});\n");
      out.write("\t\t\t\t}\n");
      out.write("\t    } else {\n");
      out.write("\t    \t$(modalObj).find('.error-Msg').removeClass('hide');\n");
      out.write("\t    \t$(modalObj).find('.error-Msg').text($('#widgetChartNameErrorMsg').text());\n");
      out.write("\t    \t$(modalObj).find('.chartName').focus();\n");
      out.write("\t    }\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction TCSBUErrorCall(e)\n");
      out.write("\t{\n");
      out.write("\t\tif(e.responseText!=null && e.responseText!=undefined)\n");
      out.write("\t\t\tshowInformation(e.responseText);\n");
      out.write("\t\telse\n");
      out.write("\t\t\tshowInformation($(\"#widgetAjaxErrorMsg\").text());\n");
      out.write("\t\treturn false;\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t/**\n");
      out.write("\t * @Function Name : populateInstanceSummaryData\n");
      out.write("\t * @Description   : creates a chart data for popluating it in to chart\n");
      out.write("\t * @param         : Json object,query fetch / refresh\n");
      out.write("\t * @returns       : chartData\n");
      out.write("\t * */\n");
      out.write("\n");
      out.write("\tfunction populateTaskCompletionSummary(data, widgetId) \n");
      out.write("\t{\n");
      out.write("\t\tvar chartData = \"\";\n");
      out.write("\t\tif(!isObjectEmpty(data.task_summary) && data.task_summary.length>0)\n");
      out.write("\t\t{\n");
      out.write("\t\t\tchartData = '{\"chart\": {\"showvalues\": \"1\",\"showLabels\":\"1\",\"canvasBorderThickness\":\"0\",\"issliced\":\"0\",\"showBorder\":\"0\",\"bgColor\":\"FFFFFF,FFFFFF\",\"canvasBgRatio\":\"100,0\",\"showlegend\": \"1\",\"useroundedges\": \"1\", \"showalternatevgridcolor\": \"1\",\"canvasbgcolor\":\"#fafbf9\"},\"data\":['\n");
      out.write("\t\t\t$.each(data.task_summary, function (idx, value) {\n");
      out.write("\t\t\t\tvar userObj = [];\n");
      out.write("\t\t\t\tif(data.name!=undefined && data.name!=null)\n");
      out.write("\t\t\t\t\tuserObj = $.grep(data.name, function(e){return e.userID == value.user});\n");
      out.write("\t\t\t\tvar user = userObj.length==1 ? userObj[0].userName : value.user.replace(/\\\\/gi,\"/\");\n");
      out.write("\t\t\t\tchartData += '{\"label\":\"' + user + '\",\"value\":\"' + value.completedTaskCountByUser + '\"},';\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\tchartData = chartData.substring(0, chartData.length - 1);\n");
      out.write("\t\t\tchartData += ']}';\n");
      out.write("\t\t}\n");
      out.write("\t\trenderChart_TCSBU(chartData,widgetId);\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t/** @Function Name   : renderChart_TCSBU\n");
      out.write("\t*   @Description     : renders the actual chart\n");
      out.write("\t*   @param           : chart type,data to render\n");
      out.write("\t*   @returns         : chart\n");
      out.write("\t* */\n");
      out.write("\t\n");
      out.write("\tfunction renderChart_TCSBU(data,widgetId){\n");
      out.write("\t\tvar widgetObject = getWidgetObject(widgetId);\n");
      out.write("\t    var filterObject = widgetObject.filter;\n");
      out.write("\t    var chartType_TCSBU;\n");
      out.write("\t    if (filterObject.chartType != undefined && filterObject.chartType != null)\n");
      out.write("\t    \tchartType_TCSBU = filterObject.chartType;\n");
      out.write("\t    else\n");
      out.write("\t\t\tchartType_TCSBU = defaults.swf3;\n");
      out.write("\t    FusionCharts.setCurrentRenderer('javascript');\n");
      out.write("\t    if(FusionCharts(\"TCSBU\"+widgetId)!=undefined && FusionCharts(\"TCSBU\"+widgetId)!=null)\n");
      out.write("\t\t\tFusionCharts(\"TCSBU\"+widgetId).dispose();\n");
      out.write("\t    var task_completion_summary_by_user = new FusionCharts(\"widgets/swf/\"+chartType_TCSBU,\"TCSBU\"+widgetId);\n");
      out.write("\t\ttask_completion_summary_by_user.setJSONData(data);\n");
      out.write("\t\tdata=task_completion_summary_by_user.getJSONData();\n");
      out.write("\t\tif(!isObjectEmpty(data)) \n");
      out.write("\t\t{\n");
      out.write("\t\t\tif (chartType_TCSBU.indexOf(\"2D\") >= 0){\n");
      out.write("\t\t\t\tif(data.chart.pieradius == null){\n");
      out.write("\t\t\t\t\tdata.chart.pieRadius = 80;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse{\n");
      out.write("\t\t\t\tdelete data.chart.pieradius;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\t\n");
      out.write("\t\ttask_completion_summary_by_user.setJSONData(data);\n");
      out.write("\t\ttask_completion_summary_by_user.setTransparent(true);\n");
      out.write("\t\ttask_completion_summary_by_user.render(defaults.chart9 + widgetId);\t\t\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction changeChartType_TCSBU(widgetId){\n");
      out.write("\t\tvar chartRef = FusionCharts(\"TCSBU\" + widgetId);\n");
      out.write("\t\trenderChart_TCSBU(chartRef.getJSONData(),widgetId);\n");
      out.write("\t}\n");
      out.write("\t\n");
      out.write("\t$('.chartName').parent().prev().text($('#widgetChartName').text());\n");
      out.write("\t$('.fromDate').closest('td').prev().text($('#widgetFromDate').text());\n");
      out.write("\t$('.toDate').closest('td').prev().text($('#widgetToDate').text());\n");
      out.write("\t$('.chartTypes').parent().prev().text($('#widgetChartType').text());\n");
      out.write("\t$('.limitValue').parent().prev().text($('#widgetFilterLimit').text());\n");
      out.write("\t$('.applyButton').text($('#widgetFilterApply').text());\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<div id='task_completion_summary_by_user' class=\"chart\"></div>\n");
      out.write("<div id=\"TCSBUChartFilter\" class=\"modal fade\" tabindex=\"-1\">\n");
      out.write("    <div class=\"modal-dialog\">\n");
      out.write("        <div class=\"modal-content\">\n");
      out.write("            <div class=\"modal-header\">\n");
      out.write("                <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\n");
      out.write("                    aria-hidden=\"true\">&times;</button>\n");
      out.write("                <span class=\"modal_heading\">Task Completion Summary by User</span>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"modal-body\">\n");
      out.write("                 <table class=\"table noLines chartFilterTable\">\n");
      out.write("                \t<tr><td class=\"error-Msg text-danger hide\" colspan=\"4\"></td></tr>\n");
      out.write("                \t<tr><td></td><td colspan=\"3\"><input type=\"text\" class=\"chartName\" maxlength=\"50\"></td></tr>\n");
      out.write("                    <tr>\n");
      out.write("                        <td></td>\n");
      out.write("                        <td>\n");
      out.write("                           <div class=\"input-group pull-left\">\n");
      out.write("                              <input type=\"text\" class=\"chartFilterDates fromDate pull-left\" data-date-format=\"yyyy-mm-dd\">\n");
      out.write("                              <span class=\"input-group-addon\">\n");
      out.write("                                 <i class=\"fa fa-calendar bigger-110\"></i>\n");
      out.write("                              </span>\n");
      out.write("                           </div>\n");
      out.write("                        </td>\n");
      out.write("                        <td></td>\n");
      out.write("                        <td>\n");
      out.write("                           <div class=\"input-group pull-left\">\n");
      out.write("                              <input type=\"text\" class=\"chartFilterDates toDate pull-left\" data-date-format=\"yyyy-mm-dd\">\n");
      out.write("                              <span class=\"input-group-addon\">\n");
      out.write("                                 <i class=\"fa fa-calendar bigger-110\"></i>\n");
      out.write("                              </span>\n");
      out.write("                           </div>\n");
      out.write("                        </td>\n");
      out.write("                    </tr>\n");
      out.write("                    <tr><td></td><td colspan=\"3\"><select class=\"limitValue\">\n");
      out.write("                    \t<option value=\"-1\">Select Limit</option>\n");
      out.write("                    \t<option value=\"5\">Top 5</option>\n");
      out.write("                    \t<option value=\"10\">Top 10</option>\n");
      out.write("                    \t<option value=\"15\">Top 15</option>\n");
      out.write("                    \t<option value=\"20\">Top 20</option>\n");
      out.write("                    </select></td></tr>\n");
      out.write("                    <tr>\n");
      out.write("                    \t<td></td>\n");
      out.write("                    \t<td>\n");
      out.write("                    \t\t<select class=\"chartTypes\"></select>\n");
      out.write("                    \t</td>\n");
      out.write("                    </tr>\n");
      out.write("                </table>\n");
      out.write("            </div>\n");
      out.write("            <div class=\"modal-footer\">\n");
      out.write("                <button class=\"btn btn-primary btn-sm applyButton\" type=\"button\" aria-hidden=\"true\" onclick=\"applyTCSBUFilter(this);return false;\"></button>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
